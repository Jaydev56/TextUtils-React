{"ast":null,"code":"var _jsxFileName = \"X:\\\\Code\\\\website\\\\React\\\\project1\\\\first\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg';\nimport { useCallback, useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alerts from './components/Alerts';\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n}]);\nfunction App() {\n  _s();\n  const navArray = ['light', 'dark'];\n  const [mode, setMode] = useState(navArray);\n  const [alert, setAlert] = useState(null);\n  const alertFunc = (message, alertMode) => {\n    setAlert({\n      msg: message,\n      alert: alertMode\n    });\n    setTimeout(() => {\n      setAlert('null');\n    }, 2000);\n  };\n  const toggleMode = () => {\n    if (mode[0] === 'light') {\n      const updatedMode = ['dark', 'light'];\n      setMode(updatedMode);\n      document.body.style.backgroundColor = '#212529';\n      alertFunc('Dark mode has been activated', \"success\");\n    } else {\n      setMode(navArray);\n      document.body.style.backgroundColor = 'white';\n      alertFunc('Light mode has been activated', \"success\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtils\",\n      mode: mode[0],\n      toggleMode: toggleMode,\n      darkModeText: mode[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Alerts, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"F6N0QjKp9raypMo9b5mr8XOHlUQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useState","About","Navbar","TextForm","Alerts","createBrowserRouter","RouterProvider","Fragment","_Fragment","jsxDEV","_jsxDEV","router","path","element","App","_s","navArray","mode","setMode","alert","setAlert","alertFunc","message","alertMode","msg","setTimeout","toggleMode","updatedMode","document","body","style","backgroundColor","children","title","darkModeText","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["X:/Code/website/React/project1/first/src/App.js"],"sourcesContent":["//import logo from './logo.svg';\nimport { useCallback, useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alerts from './components/Alerts';\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <>\n\n    </> ,\n  },\n]);\n\n\nfunction App() {\n  const navArray = ['light', 'dark']\n  const [mode, setMode] = useState(navArray);\n  const [alert, setAlert] = useState(null);\n\n  const alertFunc= (message, alertMode)=>{\n    setAlert({\n      msg: message, alert:alertMode\n    })\n    setTimeout(() => {\n      setAlert('null')\n    }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode[0] === 'light'){\n      const updatedMode = ['dark', 'light']\n      setMode(updatedMode)\n      document.body.style.backgroundColor = '#212529'\n      alertFunc('Dark mode has been activated', \"success\")\n    }\n    else{\n      setMode(navArray);\n      document.body.style.backgroundColor = 'white'\n      alertFunc('Light mode has been activated', \"success\")\n\n    }\n  }\n\n  return (\n  <>\n  <Navbar title=\"TextUtils\" mode={mode[0]} toggleMode = {toggleMode} darkModeText={mode[1]}/>\n  <Alerts alert = {alert}/>\n  \n  \n  </>\n  );\n}\n\n\nexport default App;\n\n\n\n"],"mappings":";;AAAA;AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SACEC,mBAAmB,EACnBC,cAAc,QACT,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGN,mBAAmB,CAAC,CACjC;EACEO,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAAAF,SAAA,mBAEP;AACJ,CAAC,CACF,CAAC;AAGF,SAASM,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAACgB,QAAQ,CAAC;EAC1C,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMqB,SAAS,GAAEA,CAACC,OAAO,EAAEC,SAAS,KAAG;IACrCH,QAAQ,CAAC;MACPI,GAAG,EAAEF,OAAO;MAAEH,KAAK,EAACI;IACtB,CAAC,CAAC;IACFE,UAAU,CAAC,MAAM;MACfL,QAAQ,CAAC,MAAM,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMM,UAAU,GAAGA,CAAA,KAAI;IACrB,IAAGT,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,EAAC;MACrB,MAAMU,WAAW,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC;MACrCT,OAAO,CAACS,WAAW,CAAC;MACpBC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,SAAS;MAC/CV,SAAS,CAAC,8BAA8B,EAAE,SAAS,CAAC;IACtD,CAAC,MACG;MACFH,OAAO,CAACF,QAAQ,CAAC;MACjBY,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,OAAO;MAC7CV,SAAS,CAAC,+BAA+B,EAAE,SAAS,CAAC;IAEvD;EACF,CAAC;EAED,oBACAX,OAAA,CAAAF,SAAA;IAAAwB,QAAA,gBACAtB,OAAA,CAACR,MAAM;MAAC+B,KAAK,EAAC,WAAW;MAAChB,IAAI,EAAEA,IAAI,CAAC,CAAC,CAAE;MAACS,UAAU,EAAIA,UAAW;MAACQ,YAAY,EAAEjB,IAAI,CAAC,CAAC;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC3F5B,OAAA,CAACN,MAAM;MAACe,KAAK,EAAIA;IAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eAGvB,CAAC;AAEL;AAACvB,EAAA,CArCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}